# -*- coding: utf-8 -*-
"""perceptron_and.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18vCy0lAjxO3HpZ-cb80NWTSTl0EQ8WT4
"""

import numpy as np

"""numpy 임포트 하기 """

class Perceptron:
    def __init__(self, N, alpha):
        self.W = np.random.randn(N+1)/np.sqrt(N) # W1 W2 
        self.alpha = alpha  # learning rate 
        print("Perceptron class created")

    def step(self, x):  # activation function
        if x > 0:
            return 1
        else:
            return 0

    def fit(self, X, y, epochs = 10):
        X = np.c_[X, np.ones(X.shape[0])]  # 1 bias add to X input array
        for epoch in range(epochs):  # 10번 loop 
            for (x, target) in zip(X, y): # 4번 loop
                p = self.step(np.dot(x, self.W)) # self.W :계수 x: AND 논리 입력값 x1 x2
                #print(p)
                if p != target: # 입력값 * 계수 = 미리 정해진  결과값과 같으냐? 
                    # 같지 않으면 역전파법에 의해서 계수를 업데이트 하기 
                    error = p - target  # wi(t +1) = wi(t) +α(dj −yj)xj,i
                    self.W += -self.alpha*error*x

    def predict(self, X): # X = [0 1] e.g.
        X = np.atleast_2d(X)
        X = np.c_[X, np.ones(1)]
        p = self.step(np.dot(X, self.W)) # 여기의 self.W는 이미 트레이닝 이 끝난 상테 즉 추론파일 
        print(p)
        print('------------------')

"""퍼셉트론 클래스"""

per = Perceptron(2, 0.9)

"""퍼셉트론 클래스 객체 만들기 """

X =  np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
Y = np.array([[0], [0], [0], [1]])
per.fit(X, Y) # self.W - perceptron

"""퍼셉트론 트레이닝 하기"""

x = np.array([0,0])
per.predict(x)

"""AND 논리: False AND False"""

x = np.array([1,0])
per.predict(x)

"""AND 논리: True AND False"""

x = np.array([0,1])
per.predict(x)

"""AND 논리: False AND True"""

x = np.array([1,1])
per.predict(x)

"""AND 논리: True AND True"""